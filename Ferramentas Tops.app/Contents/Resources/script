-- filepath: untitled://untitled/hackintosh_download.applescript

-- Caminho para o script temporário
set tempScriptPath to POSIX path of (path to temporary items) & "hackintosh_download.sh"

-- Substitua com a URL correta do Hardware-Sniffer
set hardwareSnifferURL to "https://github.com/lzhoang2801/Hardware-Sniffer/releases/download/1.9.2/Hardware-Sniffer.exe"

-- Script bash que será salvo no arquivo temporário
set shellScript to "
#!/bin/bash
clear

# Definir cores
RED='\\033[0;31m'
GREEN='\\033[0;32m'
YELLOW='\\033[1;33m'
BLUE='\\033[0;34m'
NC='\\033[0m' # Sem cor

echo -e \"${BLUE}<-- hnanoto-Hackintosh and beyond  -->${NC}\"
echo ''
echo -e \"${YELLOW}##### !!! DOWNLOADING FILES !!! #####${NC}\"
echo ''

# Caminho para a pasta de destino na área de trabalho
destDir=$HOME/Desktop/FerramentasTops

# Criar o diretório de destino, se não existir
mkdir -p $destDir
cd $destDir || exit 1

# Verificar dependências
command -v git >/dev/null 2>&1 || { echo -e \"${RED}git não está instalado. Por favor, instale o git e tente novamente.${NC}\"; exit 1; }
command -v curl >/dev/null 2>&1 || { echo -e \"${RED}curl não está instalado. Por favor, instale o curl e tente novamente.${NC}\"; exit 1; }
command -v unzip >/dev/null 2>&1 || { echo -e \"${RED}unzip não está instalado. Por favor, instale o unzip e tente novamente.${NC}\"; exit 1; }

# Detectar o sistema operacional
os_type=$(uname -s)

# Definir URLs do Python para diferentes sistemas operacionais
python_url_macos='https://www.python.org/ftp/python/3.13.2/python-3.13.2-macos11.pkg'
python_url_linux='https://www.python.org/ftp/python/3.13.2/Python-3.13.2.tgz'
python_url_windows='https://www.python.org/ftp/python/3.13.2/python-3.13.2-amd64.exe'

# Definir a URL do Hardware-Sniffer
hardware_sniffer_url=\"" & hardwareSnifferURL & "\"

# Função para clonar repositórios
clone_repo() {
    if [ -d $(basename $1 .git) ]; then
        echo -e \"${YELLOW}O repositório $(basename $1 .git) já existe. Pulando...${NC}\"
    else
        echo -e \"${GREEN}Cloning $1...${NC}\"
        git clone $1
        if [ $? -ne 0 ]; then
            echo -e \"${RED}Erro ao clonar o repositório $1. Verifique sua conexão e se o repositório existe.\\nSaída do git clone:$NC\"
            git clone $1 2>&1 | cat
            return 1 # Retorna um código de erro para indicar falha
        fi
    fi
}

# Função para baixar arquivos e descompactar ZIPs
download_file() {
    echo -e \"${GREEN}Downloading $1 to $2...${NC}\"
    curl -L -# $1 -o $2
    if [ $? -ne 0 ]; then
        echo -e \"${RED}Erro ao baixar o arquivo $1. Verifique sua conexão e se o arquivo existe.\\nSaída do curl:$NC\"
        curl -L -# $1 -o $2 2>&1 | cat
        return 1 # Retorna um código de erro
    fi

    # Descompactar arquivos .zip
    if [[ $2 == *.zip ]]; then
        echo -e \"${GREEN}Descompactando $2...${NC}\"
        unzip $2
        if [ $? -ne 0 ]; then
            echo -e \"${RED}Erro ao descompactar o arquivo $2.\\nSaída do unzip:$NC\"
            unzip $2 2>&1 | cat
            return 1 # Retorna um código de erro
        fi
        rm $2 # Remove o arquivo .zip após a descompactação
    fi
}

# Função para baixar o Hackintool diretamente da API do GitHub
download_hackintool() {
    echo -e \"${GREEN}Downloading Hackintool...${NC}\"
    latest_release=$(curl -s https://api.github.com/repos/benbaker76/Hackintool/releases/latest | grep 'browser_download_url.*zip' | cut -d '\"' -f 4)
    if [ -z $latest_release ]; then
        echo -e \"${RED}Erro ao obter a URL de download do Hackintool da API do GitHub.${NC}\"
        return 1
    fi
    download_file $latest_release Hackintool.zip
    if [ $? -ne 0 ]; then
      echo -e \"${RED}Erro ao baixar ou descompactar Hackintool.${NC}\"
      return 1
    fi
}

# Função para baixar a última versão do Python 3
download_python3() {
    echo -e \"${GREEN}Downloading Python 3...${NC}\"

    # Selecionar a URL do Python com base no sistema operacional
    case $os_type in
        Darwin*)
            python_url=$python_url_macos
            ;;
        Linux*)
            python_url=$python_url_linux
            ;;
        Windows*)
            python_url=$python_url_windows
            ;;
        *)
            echo -e \"${RED}Sistema operacional não suportado. Baixando a versão do macOS por padrão.${NC}\"
            python_url=$python_url_macos
            ;;
    esac

    download_file $python_url python3.pkg
    if [ $? -ne 0 ]; then
      echo -e \"${RED}Erro ao baixar o instalador do Python 3.${NC}\"
      return 1
    fi
}

# Função para verificar o espaço livre em disco (em MB)
check_disk_space() {
    local required_space=$1 # Espaço requerido em MB
    local available_space=$(df -m $destDir | awk 'NR==2{print $4}') # Espaço disponível em MB
    if [ $available_space -lt $required_space ]; then
        echo -e \"${RED}Espaço insuficiente em disco. Requer $required_space MB, mas apenas $available_space MB disponíveis em $destDir.${NC}\"
        return 1
    else
        return 0
    fi
}

# Função para baixar o Hardware-Sniffer
download_hardware_sniffer() {
    echo -e \"${GREEN}Downloading Hardware-Sniffer...${NC}\"
    download_file \"$hardware_sniffer_url\" Hardware-Sniffer.exe
    if [ $? -ne 0 ]; then
        echo -e \"${RED}Erro ao baixar o arquivo Hardware-Sniffer.\\nPor favor, verifique sua conexão com a internet e se a URL está correta.${NC}\"
        return 1
    fi
}

while true; do
    echo -e \"${BLUE}Escolha um programa para baixar, 21 para baixar todos ou 0 para sair:${NC}\"
    echo '1) OpenCorePkg (Source)'
    echo '2) OcBinaryData'
    echo '3) ProperTree'
    echo '4) Hackintool'
    echo '5) MountEFI'
    echo '6) SSDTTime'
    echo '7) gibMacOS'
    echo '8) GenSMBIOS'
    echo '9) USBMap'
    echo '10) OC-Update'
    echo '11) CPU-Name'
    echo '12) gibMacRecovery'
    echo '13) CloverBootloader'
    echo '14) Lilu-and-Friends'
    echo '15) Update_Clover'
    echo '16) update_opencore'
    echo '17) Open_EFIs_FSKIT'
    echo '18) Python 3'
    echo '19) Hackintool-On-AppleSilicon'
    echo '20) OpCore-Simplify'
    echo '21) Hardware-Sniffer'
    echo '0) Sair'
    read -p 'Digite sua escolha: ' choice

    case $choice in
        1) clone_repo https://github.com/acidanthera/OpenCorePkg.git ;;
        2) clone_repo https://github.com/acidanthera/OcBinaryData.git ;;
        3) clone_repo https://github.com/corpnewt/ProperTree.git ;;
        4) download_hackintool ;;
        5) clone_repo https://github.com/corpnewt/MountEFI.git ;;
        6) clone_repo https://github.com/corpnewt/SSDTTime.git ;;
        7) clone_repo https://github.com/corpnewt/gibMacOS.git ;;
        8) clone_repo https://github.com/corpnewt/GenSMBIOS.git ;;
        9) clone_repo https://github.com/corpnewt/USBMap.git ;;
        10) clone_repo https://github.com/corpnewt/OC-Update.git ;;
        11) clone_repo https://github.com/corpnewt/CPU-Name.git ;;
        12) clone_repo https://github.com/corpnewt/gibMacRecovery.git ;;
        13) clone_repo https://github.com/CloverHackyColor/CloverBootloader.git ;;
        14) clone_repo https://github.com/corpnewt/Lilu-and-Friends.git ;;
        15) clone_repo https://github.com/hnanoto/Update_Clover.git ;;
        16) clone_repo https://github.com/hnanoto/update_opencore.git ;;
        17) download_file https://github.com/hnanoto/Open_EFIs_FSKIT/releases/latest/download/Open_EFIs_FSKIT.zip Open_EFIs_FSKIT.zip ;;
        18) download_python3 ;;
        19) clone_repo https://github.com/RoidMC/Hackintool-On-AppleSilicon.git ;;
        20) clone_repo https://github.com/lzhoang2801/OpCore-Simplify.git ;;
        21) download_hardware_sniffer ;;
        0) echo -e \"${RED}Saindo...${NC}\"; break ;;
        *) echo -e \"${RED}Opção inválida. Tente novamente.${NC}\" ;;
    esac
    echo ''
done

echo -e \"${YELLOW}##### !!! FINISHED DOWNLOADING FILES !!! #####${NC}\"
echo ''
"

-- Escreve o script no arquivo temporário
try
	do shell script "echo " & quoted form of shellScript & " > " & quoted form of tempScriptPath
on error errMsg
	display dialog "Erro ao escrever o script: " & errMsg
	return
end try

-- Torna o script executável
try
	do shell script "chmod +x " & quoted form of tempScriptPath
on error errMsg
	display dialog "Erro ao tornar o script executável: " & errMsg
	return
end try

-- Executa o script no Terminal
try
	do shell script "open -a Terminal " & quoted form of tempScriptPath
on error errMsg
	display dialog "Erro ao executar o script: " & errMsg
	return
end try
